apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "boilerplate.names.fullname" . }}
  {{- with .Values.global.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
    {{- include "boilerplate.labels.standard" . | nindent 4 }}
spec:
  serviceName: "{{ include "boilerplate.names.name" . }}"
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "boilerplate.labels.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "boilerplate.labels.standard" . | nindent 8 }}
    spec:
      {{- include "boilerplate.images.pullSecrets"
        ( dict
          "globalImagePullSecrets" .Values.global.imagePullSecrets
          "localImagePullSecrets" .Values.image.pullSecrets
        ) | nindent 6
      }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- include "boilerplate.images.image"
            ( dict
              "root" .
              "image" .Values.image
            ) | nindent 10
          }}
          {{- include "boilerplate.images.pullPolicy"
            ( dict
              "globalPullPolicy" .Values.global.imagePullPolicy
              "localPullPolicy" .Values.image.pullPolicy
            ) | nindent 10
          }}
          command: ["docker-ensure-initdb.sh"]
          {{- include "boilerplate.environment.env" ( dict "env" .Values.env "global" .Values.global ) | nindent 10 }}
          {{- include "boilerplate.environment.envFrom" ( dict "envFrom" .Values.envFrom "global" .Values.global ) | nindent 10 }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/{{ include "postgres.majorVersion" . }}/docker
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}

      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if not .Values.persistence.enabled }}
      volumes:
        - name: data
          emptyDir: {}
      {{- end }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.persistence.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        accessModes:
          {{- range .Values.persistence.accessModes }}
          - {{ . }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        {{- with .Values.persistence.selector}}
        selector:
          {{- toYaml . | nindent 10 }}
        {{- end }}
  {{- end }}
