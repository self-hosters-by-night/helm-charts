global:
  annotations: {}
  labels: {}
  imagePullSecrets: []
  imageRegistry: ""
  imagePullPolicy: ""

nameOverride: ""

image:
  registry: docker.io
  repository: postgres
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

## @param env Define environment variables or load specific ones from ConfigMaps and Secrets
env:
  vars:
    # Useful for development instances only. In production, use secrets.
    # POSTGRES_USER: "postgres"
    # POSTGRES_PASSWORD: "password"
    # POSTGRES_DB: "database"
  fromConfigMap: {}
  # POSTGRES_DB:
  #     from: configmap-name
  #     key: configmap-key
  #     optional: false
  fromSecret: {}
  # POSTGRES_PASSWORD:
  #     from: secret-name
  #     key: secret-key
  #     optional: false

envFrom:
  configMaps: []
  # - name: postgres-config

  secrets: []
  #  - name: postgres-secret

persistence:
  enabled: true
  annotations: {}
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: "10Gi"
  selector: null

# Additional volumes on the output StatefulSet definition.
extraVolumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output StatefulSet definition.
extraVolumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

service:
  type: ClusterIP
  port: 5432

# Health checks
livenessProbe:
  tcpSocket:
    port: 5432
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6

readinessProbe:
  exec:
    command:
      - "/bin/sh"
      - "-c"
      - "exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 6

resources: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 999
  runAsGroup: 999
  fsGroup: 999

securityContext:
  allowPrivilegeEscalation: false
