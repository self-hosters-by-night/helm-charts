global:
  imageRegistry: docker.io
  imagePullPolicy: Always
  imagePullSecrets:
    - global-secret

# {{ include "boilerplate.images.image" .Values }}
image:
  registry: docker.io # overridden by global
  repository: myapp
  tag: v1.0.0 # define either tag or digest
  digest: 6akexk9fo9bj2lcdfbiygd9s895r6znx
  pullPolicy: IfNotPresent # overridden by global
  pullSecrets:
    - app-secret # merged with global

# Define environment variables or load specific ones from ConfigMaps and Secrets
env: []
  # - name: POSTGRES_USER
  #   value: "postgres"

configMapRefs: []
# - name: s3-config

secretRefs: []
#  - name: s3-config

extraConfigMapRefs: []
extraSecretRefs: []

# {{ include "boilerplate.images.image" .Values.myapp }}
myapp:
  image:
    registry: docker.io # overridden by global
    repository: myapp
    tag: v1.0.0 # define either tag or digest
    digest: 6akexk9fo9bj2lcdfbiygd9s895r6znx
    pullPolicy: IfNotPresent # overridden by global
    pullSecrets:
      - app-secret # merged with global

replicaCount: 1

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  targetKind: Deployment
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  customMetrics: []
  behavior: {}

# StatefulSet configuration
statefulset:
  enabled: false
  replicaCount: 1
  volumeClaimTemplates: []
  # - metadata:
  #     name: data
  #   spec:
  #     accessModes: ["ReadWriteOnce"]
  #     storageClassName: fast-ssd
  #     resources:
  #       requests:
  #         storage: 10Gi

# HTTPRoute configuration for Gateway API
httproute:
  enabled: false
  annotations: {}
  parentRefs:
    - name: gateway
  hostnames: []
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: ""
          port: 80
          weight: 100

# TCPRoute configuration for Gateway API
tcproute:
  enabled: false
  annotations: {}
  parentRefs:
    - name: gateway
  rules:
    - backendRefs:
        - name: ""
          port: 80
          weight: 100

# Persistence configuration
persistence:
  enabled: false
  size: 8Gi
  accessModes:
    - ReadWriteOnce
  storageClass: ""
  annotations: {}
  selector: {}
  volumeName: ""
  volumeMode: ""

# Secret configuration
secret:
  create: false
  type: Opaque
  annotations: {}
  data: {}
  # data:
  #   key1: value1
  stringData: {}
  # stringData:
  #   key2: value2

# ConfigMap configuration
configMap:
  create: false
  annotations: {}
  data: {}
  # data:
  #   config.yaml: |
  #     key: value
  binaryData: {}
  # binaryData:
  #   binary-key: base64-encoded-data

# CronJob configuration
cronjob:
  enabled: false
  schedule: "0 2 * * *"
  timeZone: ""
  concurrencyPolicy: Allow
  suspend: false
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  startingDeadlineSeconds: 300
  backoffLimit: 3
  activeDeadlineSeconds: 3600
  ttlSecondsAfterFinished: 86400
  restartPolicy: OnFailure
  annotations: {}
  jobAnnotations: {}
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  image:
    registry: docker.io
    repository: busybox
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets: []
  command: []
  args: []
  env: []
  resources: {}
  volumeMounts: []
  volumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []

# RBAC configuration
rbac:
  create: false
  annotations: {}
  rules: []
  # rules:
  # - apiGroups: [""]
  #   resources: ["pods"]
  #   verbs: ["get", "list"]
  extraSubjects: []
  # extraSubjects:
  # - kind: User
  #   name: system:serviceaccount:default:my-user
  #   apiGroup: rbac.authorization.k8s.io

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Extra volumes using boilerplate templates
extraVolumes: []
# - name: config-volume
#   configMap:
#     name: my-config

# Extra volume mounts using boilerplate templates
extraVolumeMounts: []
# - name: config-volume
#   mountPath: /etc/config

nodeSelector: {}

tolerations: []

affinity: {}
