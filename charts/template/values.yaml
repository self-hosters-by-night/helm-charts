global:
  imageRegistry: docker.io
  imagePullPolicy: Always
  imagePullSecrets:
    - global-secret

# {{ include "boilerplate.images.image" .Values }}
image:
  registry: docker.io # overridden by global
  repository: myapp
  tag: v1.0.0 # define either tag or digest
  digest: 6akexk9fo9bj2lcdfbiygd9s895r6znx
  pullPolicy: IfNotPresent # overridden by global
  pullSecrets:
    - app-secret # merged with global

# {{ include "boilerplate.images.image" .Values.myapp }}
myapp:
  image:
    registry: docker.io # overridden by global
    repository: myapp
    tag: v1.0.0 # define either tag or digest
    digest: 6akexk9fo9bj2lcdfbiygd9s895r6znx
    pullPolicy: IfNotPresent # overridden by global
    pullSecrets:
      - app-secret # merged with global

replicaCount: 1

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# Extra volumes using boilerplate templates
extraVolumes: []
# - name: config-volume
#   configMap:
#     name: my-config

# Extra volume mounts using boilerplate templates
extraVolumeMounts: []
# - name: config-volume
#   mountPath: /etc/config

nodeSelector: {}

tolerations: []

affinity: {}
