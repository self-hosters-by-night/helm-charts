global:
  annotations: {}
  labels: {}
  imagePullSecrets: []
  imageRegistry: ""
  imagePullPolicy: ""

nameOverride: ""

image:
  registry: docker.io
  repository: postgres
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []

# Define environment variables or load specific ones from ConfigMaps and Secrets
env: []
  # If configuring postgres credentials as env vars set credentials.externalSecret.enabled: false
  # Useful for development instance
  # - name: POSTGRES_USER
  #   value: "postgres"
  # - name: POSTGRES_PASSWORD
  #   value: "password"
  # - name: POSTGRES_DB
  #   value: "database"

configMapRefs: []
# - name: s3-config

secretRefs: []
#  - name: s3-config

extraConfigMapRefs: []
extraSecretRefs: []

persistence:
  enabled: true
  annotations: {}
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: "10Gi"
  selector: null

# Additional volumes on the output StatefulSet definition.
extraVolumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output StatefulSet definition.
extraVolumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

service:
  type: ClusterIP
  port: 5432

# Health checks
livenessProbe:
  tcpSocket:
    port: 5432
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6

readinessProbe:
  exec:
    command:
      - "/bin/sh"
      - "-c"
      - "exec pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 6

resources: {}

securityContext:
  allowPrivilegeEscalation: false
